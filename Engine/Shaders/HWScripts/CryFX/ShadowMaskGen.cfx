// CRYENGINE Source Code File
// Copyright 2001-2015 Crytek GmbH. All rights reserved.

#include "Common.cfi" 
#include "PostEffectsLib.cfi"

// Shader global descriptions
float Script : STANDARDSGLOBAL
<
  string Script =
           "NoPreview;"
           "LocalConstants;"
           "ShaderDrawType = Custom;"
           "ShaderType = PostProcess;"
>; 

Texture2D  <float4> sceneDepthTexture   : TS_ZTarget  ;
Texture2DMS<float4> sceneDepthTextureMS : TS_ZTargetMS;

Texture2D  <float4> sceneGBufferA   : TS_SceneNormals;
Texture2D  <float4> sceneGBufferB   : TS_SceneDiffuse;
Texture2D  <float4> sceneGBufferC   : TS_SceneSpecular;

sampler2D maskMSAASampler = sampler_state
{
 Texture = $BackBuffer;
 MinFilter = POINT;
 MagFilter = POINT;
 MipFilter = POINT;
 AddressU = Clamp;
 AddressV = Clamp;
};

sampler2D globalScatterSampler = sampler_state
{
 Texture = textures/lights/beam_glow.dds;
 MinFilter = LINEAR;
 MagFilter = LINEAR;
 MipFilter = NONE;
 AddressU = Wrap;
 AddressV = Wrap;  
};

//force using hw_pcf_compare sampler's states
//#define HW_PCF_COMPARE 1
#include "ShadowCommon.cfi"



//===========================================================================
// Basic shadow maps support
float4 g_vViewPos				: PB_CameraPos;

float4x4 CompMatrix  			: PI_Composite < vsregister = c0; >;    // View*Projection

float4 vProjRatios		: PB_TempData[0];

//rotation to light space
float4x4 RotMatrix        : PB_TempMatr0[1];
float4x4 BlendTexGen      : PB_TempMatr0[2];
float4   BlendTcNormalize : PB_TempData[6];	

//FIX: reserve params for common shaders
float4 vWBasisX		: PB_TempData[10];
float4 vWBasisY		: PB_TempData[11];
float4 vWBasisZ		: PB_TempData[12];
float4 vBasisMagnitudes	: PB_TempData[14];

//XBOX
float4 ScreenSpaceOffset[4] < register = c32 ; >

float4 BlendInfo 							: PB_TempData[15];

// debug shadow cascade color
float4  DebugCascadeColor;

/////////////////////////////
// structs

struct pixout_cl
{
	half4 Color : SV_Target0;
};

struct pixout_cl_void
{
};

struct pixout_cl_depth
{
	float4 Color : SV_Target0;
	float  Depth : SV_Depth;
};

struct pixout_cl_void_depth
{
#if !OPENGL
	float  Depth : SV_Depth;
#else
	//HLSLcc compiler crash issue
	float Depth    : COLOR0; 
#endif
};

struct app2vertShadow
{
  IN_P
  IN_TBASE
  float3 viewDir : TEXCOORD1;
};

struct app2vertStencilCull
{
  IN_P
  IN_TBASE
	IN_C0
};


struct vert2fragStencilCull
{
	float4 HPosition : POSITION;
};

struct pixout_StencilCull
{
	half4 Color : SV_Target0;
};

struct pixout_StencilCull_void
{
};


struct vert2fragShadowDeferredProj
{
	float4 HPosition	:	POSITION;
	float4 ViewPos		:	TEXCOORD0;
	float4 ViewVect		:	TEXCOORD1;
	float4 ScreenTC		:	TEXCOORD2;
};

struct vert2fragShadowDeferred
{
	float4 HPosition	:	POSITION;
	float4 ViewPosLS_ViewVectLS	:	TEXCOORD0;
	float4 ScreenTC		:	TEXCOORD1;
#if %_RT_SAMPLE2 || %_RT_SAMPLE3
	float3 WS_ViewVect	:	TEXCOORD4;
#endif
};


struct fragInShadowDeferred
{
//order should be the  same as ouyput from vert2frag for dx10 
	float4 WPos	:	SV_POSITION;
	float4 ViewPosLS_ViewVectLS	:	TEXCOORD0;
	float4 ScreenTC		:	TEXCOORD1;
#if %_RT_SAMPLE2 || %_RT_SAMPLE3
	float3 WS_ViewVect	:	TEXCOORD4;
#endif
};


struct vert2fragDeferred
{
	float4 HPosition		:	POSITION;
	float2 ScreenTC			:	TEXCOORD0;
	float3 WS_ViewVect	:	TEXCOORD1;
};

struct v2fShadowSimple
{
  float4 Position : POSITION;
	float4 vScrPos		: TEXCOORDN;  
};


float4 CalcHomogeneousPos(float SceneDepth, float2 WPos)
{
	//separate scale to make sure we don't lost the precision during "mad"'s of WBasis vectors
	float4 vWBasisScale = vBasisMagnitudes * SceneDepth; 
  vWBasisScale.xy *= WPos.xy;

	float4 HPos = vWBasisZ.xyzw*vWBasisScale.z+(vWBasisX.xyzw*vWBasisScale.x)+(vWBasisY.xyzw*vWBasisScale.y);
	HPos = vCamPos.xyzw + HPos.xyzw;


  return HPos;
}

float4 CalcHomogeneousBlendPos(float SceneDepth, float2 WPos)
{
	float4 pPos = float4(float3(WPos.xy,1) * SceneDepth , 1);
	float4 HPos = mul(pPos,BlendTexGen);

	HPos.xy /= HPos.w;

	return HPos;
}

float BlendVP(float3 vp, bool blendOut)
{
	float3 vBlend;
	float2 BlendVal = (blendOut) ? BlendInfo.xy : BlendInfo.zw;

#if ORBIS
	// shader compiler workaround
  vBlend.xy =  clamp(abs(vp.xy*2-1), 0.0f, 0.999999f);
#else
	vBlend.xy =  saturate(abs(vp.xy*2-1));
#endif

	vBlend.xy -= BlendVal.x;
	vBlend.xy *= BlendVal.y;

	float fBlendValZ = 0.975;  // Magic number

	vBlend.z = vp.z * fOneDivFarDist.x;
	vBlend.z -= fBlendValZ;
	vBlend.z *=  1.0f / (1.0f - fBlendValZ);

	float result = saturate(max(max(vBlend.x,vBlend.y),vBlend.z));

	return (blendOut) ? (1.0 - result) : result;
}

v2fShadowSimple TexturedQuadVS(app2vertStencilCull IN)
{
	v2fShadowSimple OUT = (v2fShadowSimple)0; 

  // Position in screen space.
  float4 vPos = IN.Position;
  OUT.Position = float4(2.0f * (vPos.xy + 0.5f) / g_VS_ScreenSize.xy - 1.0f, vPos.zw);

  // output texture coordinates
  OUT.vScrPos.xy = IN.baseTC.xy; // + PixelOffset.xy * 0.5
  return OUT;
}


vert2fragStencilCull SimpleQuadVS(app2vertStencilCull IN)
{
	vert2fragStencilCull OUT = (vert2fragStencilCull)0; 

  // Position in screen space.
  float4 vPos = IN.Position;
  OUT.HPosition = float4(2.0f * (vPos.xy + 0.5f) / g_VS_ScreenSize.xy - 1.0f, vPos.zw);

  // output texture coordinates
  //OUT.baseTC.xy = IN.baseTC.xy + PixelOffset.xy * 0.5;

  return OUT;
}

vert2fragStencilCull SimpleQuadVS01(app2vertStencilCull IN)
{
	vert2fragStencilCull OUT = (vert2fragStencilCull)0; 

  // Position in screen space.
  float4 vPos = IN.Position;
  OUT.HPosition = float4(2.0f * vPos.xy - 1.0f, vPos.zw);

  return OUT;
}

vert2fragStencilCull HiStencilRefreshVS(app2vertShadow IN)
{
	vert2fragStencilCull OUT = (vert2fragStencilCull)0; 

	float4 vPos = IN.Position;
	OUT.HPosition = mul(CompMatrix, vPos);

	return OUT;
}

vert2fragStencilCull StencilCullVS(app2vertStencilCull IN)
{
	vert2fragStencilCull OUT = (vert2fragStencilCull)0; 

	float4 vPos = IN.Position;
	OUT.HPosition = mul(CompMatrix, vPos);

	return OUT;
}

vert2fragStencilCull FrustumVolumeVS(app2vertStencilCull IN)
{
	vert2fragStencilCull OUT = (vert2fragStencilCull)0; 

	float4 vPos = IN.Position;
	//unprojection
	vPos = mul(TexGen0, vPos);

	//normalization
	vPos /= vPos.w;
	vPos.w = 1.0f;

	//sphere adjusting

  //float4 LSPos = float4(397,373,74.39, 50);
	float3 vLightDir = normalize(vPos.xyz - LSPos.xyz);
	vLightDir *= LSPos.w; //radius multiplication;

	// select proper vector: baseTC.x is 0 for the pyramid tip only, 1 otherwise
	vPos.xyz = IN.baseTC.x > 0 ? (LSPos.xyz + vLightDir) : LSPos.xyz; 

	//final ViewProj transformation
	OUT.HPosition = mul(CompMatrix, vPos);
	
	return OUT;
}

pixout_StencilCull_void StencilCullPS(vert2fragStencilCull IN)
{
	pixout_StencilCull_void OUT = (pixout_StencilCull_void)1;

	return OUT;
}

vert2fragShadowDeferred DeferredShadowVS(app2vertShadow IN)
{
	vert2fragShadowDeferred OUT = (vert2fragShadowDeferred)0; 

	OUT.HPosition = Get2dHPos(IN.Position);
  OUT.ScreenTC.xy = IN.baseTC.xy;
	OUT.ScreenTC.zw = OUT.ScreenTC.xy*g_VS_ScreenSize.xy/4;

#if %_RT_SAMPLE2 || %_RT_SAMPLE3
	OUT.WS_ViewVect = IN.viewDir.xyz;
#endif

	//noise projection
	float3 ViewPosLS = mul(g_vViewPos.xyz, (float3x3)RotMatrix);
	OUT.ViewPosLS_ViewVectLS.xy = ViewPosLS.xy;
	OUT.ViewPosLS_ViewVectLS.zw = ( mul((g_vViewPos.xyz + IN.viewDir.xyz), (float3x3)RotMatrix) - ViewPosLS.xyz ).xy;

	return OUT;
}

pixout_cl_void_depth CopyDepthTarget(v2fShadowSimple IN)
{
	pixout_cl_void_depth OUT = (pixout_cl_depth) 1;

	// Get device depth taking into account nearest depth scaling
	float fSceneDepth = GetDepthMap(sceneDepthTexture, IN.vScrPos.xy).r;
	float fNearestScaledLinear = g_PS_ProjRatio.y / (g_PS_NearestScaled.z - g_PS_ProjRatio.x);
	float2 ProjRatio = (fSceneDepth<fNearestScaledLinear)?g_PS_NearestScaled.xy:g_PS_ProjRatio.xy;
	float fDevDepth = ProjRatio.x + ProjRatio.y/fSceneDepth;

	OUT.Depth = fDevDepth;

	return OUT;
}

float4x4 g_mReprojDstToSrc;
float4x4 g_mReprojSrcToDst;

pixout_cl_void_depth ReprojectShadowMap(vtxOut IN)
{
	pixout_cl_void_depth OUT = (pixout_cl_void_depth) 1;
	float4 clipPosDst = float4(IN.baseTC.xy * float2(2, -2) - float2(1, -1), 0, 1);
	
	float4 clipPosSrc =  mul(clipPosDst, g_mReprojDstToSrc);
	clipPosSrc.xy /= clipPosSrc.w;
	
	float2 tcSrc = clipPosSrc.xy * float2(0.5, -0.5) + 0.5;
	float srcDepth = tex2D(_tex0, tcSrc);
	clipPosDst.zw = mul(float4(clipPosSrc.xy, srcDepth, 1.0f), g_mReprojSrcToDst).zw;
	float dstDepth = clipPosDst.z / clipPosDst.w;
	
	if (tcSrc.x >=0 && tcSrc.x <= 1 && tcSrc.y >= 0 && tcSrc.y <= 1 && srcDepth < 1)
		OUT.Depth = saturate(dstDepth);

	return OUT;
}

float4 CalcShadowSpace(float4 HPos)
{
  float4 P0 = HPos;
	P0.xy /= P0.w;

	#if !%_RT_NEAREST
		//TOFIX: concatenate this operations to the projection matrix
		P0.z *= fOneDivFarDist.x;
	#endif

	//we do slope scale bias during shadowgen only
	//make constant bias for sun
	P0.z -= fDepthTestBias.x; 

  return P0;
}


half CalcShadow(float4 vShPos, float2 vNoisePos, const bool bContactHardening)
{
  float4 P0 = vShPos;

//clamp depth in shadows space for all FP shadowmaps
//comparison sampler doesn't do clamping internally for FP formats
#if %_RT_SHADOW_MIXED_MAP_G16R16
	P0.z = clamp(P0.z, 0.0f, 0.999999f);
#endif
	//can't be done is VS because depth reconstruction is in projective space
	//P0.z = (P0.z *  fOneDivFarDist.x)- fDepthTestBias.x;

//scale for noise projecton should be computed based on the size of shadow frustums(increase if it's bigger) 
//and distance to viewer((decrease if it's father)) 

	float2 NoiseP = vNoisePos.xy;

	half fInShadow = 1;

#if %_RT_SHADOW_JITTERING
      //uniform_pcf_fast(depthMapSampler0, P0, fInShadow);
      irregular_filter(depthMapSampler0, sRotSampler, P0, NoiseP.xy, GetKernelSize(), fInShadow, bContactHardening);
#else 
	//debug one-tap sampling
	shadow_sample(depthMapSampler0, P0, fInShadow);
#endif

  return fInShadow;
}

float GetSceneDepthMS(float3 iScreenCoord, int iSample)
{
	return sceneDepthTextureMS.Load(iScreenCoord, iSample).x;
}

//////////////////////////////////////////////////////////////////////////
// Frust Cull
//////////////////////////////////////////////////////////////////////////
struct vert2fragFrustClip
{
	float4 HPosition	:	POSITION;
	float4 ViewPos		:	TEXCOORD0;
	float4 ViewVect		:	TEXCOORD1;
	float2 ScreenTC		:	TEXCOORD3;
};

struct fragInFrustClip
{
	float4 WPos	:	SV_POSITION;
	float4 ViewPos		:	TEXCOORD0;
	float4 ViewVect		:	TEXCOORD1;
	float2 ScreenTC		:	TEXCOORD3;
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////
vert2fragStencilCull FrustumClipVolumeVS(app2vertStencilCull IN)
{
	vert2fragStencilCull OUT;

	OUT = (vert2fragStencilCull)0; 

	float4 vPos = IN.Position;

#if %_RT_SAMPLE3
	float4x4 blendMat  = float4x4(BlendInfo.x,0.0f, 0.0f, 0.0f,  // ignoring z-blend for now
																0.0f, BlendInfo.x,0.0f, 0.0f,
																0.0f, 0.0f, 			1.0f, 0.0f,
																0.0f, 0.0f, 			0.0f, 1.0f);

	blendMat = mul(TexGen0,blendMat);
	vPos = mul(blendMat, vPos);
#else
	vPos = mul(TexGen0, vPos);
#endif

	//normalization
	vPos.xyz /= vPos.w;
	vPos.w = 1.0f;

	//final ViewProj transformation
	OUT.HPosition = mul(CompMatrix,vPos); 

	return OUT;
}

pixout_StencilCull_void FrustumClipVolumePS(vert2fragStencilCull IN)
{
	pixout_StencilCull_void OUT = (pixout_StencilCull_void)1;

	return OUT;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////

vert2fragFrustClip FrustumClipVS(app2vertShadow IN)
{
	vert2fragFrustClip OUT = (vert2fragFrustClip)0; 

	float4 vPos = IN.Position;

	OUT.HPosition = mul(CompMatrix, vPos); 

  //ViewPos and ViewVect in projective space
  ShadowTexSpace(float4(g_vViewPos.xyz, 1), TexGen0, fOneDivFarDist.x, OUT.ViewPos);
  ShadowTexSpace(float4(g_vViewPos.xyz + IN.viewDir.xyz, 1), TexGen0, fOneDivFarDist.x, OUT.ViewVect);

  OUT.ViewVect -= OUT.ViewPos;
  OUT.ScreenTC.xy = IN.baseTC.xy;

	return OUT;
}

pixout_cl_void FrustumClipPS(fragInFrustClip IN)
{
  pixout_cl_void OUT;

  float SceneDepth = GetLinearDepth( sceneDepthTexture, IN.ScreenTC.xy );  

	//simplified shadow tex space reconstruction
	float4 P0 = IN.ViewPos + IN.ViewVect * SceneDepth;
  //float4  P0 = CalcHomogeneousPos(SceneDepth, IN.WPos.xy/*+ScreenSpaceOffset[0].xy*/);
	P0.xy /= P0.w;
	
	float4 clipFrustum;
	clipFrustum.xy = P0.xy;
	clipFrustum.zw = 1.0-P0.xy;

	clip( clipFrustum );

	return OUT;
}



///////////////// shadows pixel shader //////////////////

[earlydepthstencil]
pixout_cl DeferredShadowPS(fragInShadowDeferred IN)
{
  pixout_cl OUT;

  float4 P0 = 0.0f;

	// Todo: bilateral upscale pass. Measure performance vs rendering shadows to multisampled target+sample freq passes
  float SceneDepth = GetLinearDepth( sceneDepthTexture, IN.ScreenTC.xy );

  P0 = CalcHomogeneousPos(SceneDepth, IN.WPos.xy);

  float4 pOutBlend = float4(P0.xy / P0.w, P0.zw);
  pOutBlend.xy = pOutBlend.xy * BlendTcNormalize.xy + BlendTcNormalize.zw;
  
  P0 = CalcShadowSpace(P0);

#if %_RT_SAMPLE1
	const bool bContactHardening = true;
#else
	const bool bContactHardening = false;
#endif

  float2 NoiseP = IN.ViewPosLS_ViewVectLS.xy + IN.ViewPosLS_ViewVectLS.zw * SceneDepth;
  half fInShadow = CalcShadow(P0, NoiseP, bContactHardening);

  //gsm fading
	half2 fDist = 2.0*abs(P0.xy-half2(0.5,0.5));
  half fFadeF = 1.0 - (fShadowFadingDist.x * pow(max(fDist.x,fDist.y),8));

#if %_RT_SAMPLE2
	// Apply sun SS shadows
	float3 WorldP = g_vViewPos.xyz + IN.WS_ViewVect * SceneDepth;
	CalculateDetailSSShadow( SceneDepth, WorldP, WorldP + g_PS_SunLightDir.xyz, CompMatrix, fInShadow, true );
#endif

	// Apply POM self-shadowing
	uint2 pixelCoord = int2(IN.ScreenTC.xy * PS_ScreenSize.xy);
	OUT.Color = 1 - fInShadow * (1 - DecodeSunSelfShadowing(sceneGBufferA[pixelCoord], sceneGBufferB[pixelCoord], sceneGBufferC[pixelCoord]));
	
	OUT.Color *= saturate(fFadeF);

	if(BlendTexGen[3][3] != 0)// blend inwards
	{
		float4 pBlendVP = CalcHomogeneousBlendPos(SceneDepth, IN.WPos.xy);
		OUT.Color *= BlendVP(pBlendVP.xyz, false);
	}

#if %_RT_SAMPLE3 // Outward Blend. Round nearest (opposite to blend inwards)
	float fBlend = BlendVP(pOutBlend.xyz, true);
	fBlend += 0.5f / 255.0f;
	OUT.Color *= fBlend;
#endif

	return OUT;
}

pixout_cl CloudsShadowPS(fragInShadowDeferred IN)
{
	pixout_cl OUT = (pixout_cl) 1;
	float visibility = 1;

#if %_RT_SAMPLE2 || %_RT_SAMPLE3
	float SceneDepth = GetLinearDepth( sceneDepthTexture, IN.ScreenTC.xy );
	float3 WorldP = g_vViewPos.xyz + IN.WS_ViewVect * SceneDepth;
#endif

#if %_RT_SAMPLE3
	visibility = 1 - GetVolumetricCloudShadow(WorldP.xyz);
#elif %_RT_SAMPLE2
	visibility = 1 - GetCloudShadow(WorldP);
#endif

	OUT.Color = visibility;

	return OUT;
}

//----------------------------------------------------------
samplerCUBE DebugCM  : register(s0);
sampler2D DebugSM  : register(s0);

struct app2vertDebug
{
  IN_P
	float3 vIdxCoord	: TEXCOORDN;  
};

struct v2fDebug
{
  float4 Position 	: POSITION;
	float3 vIdxCoord	: TEXCOORDN;  
};

v2fDebug DebugCMVS(app2vertDebug IN)
{
	v2fDebug OUT;
  OUT.Position = mul(vpMatrix, IN.Position);
	OUT.vIdxCoord = IN.vIdxCoord;
	return OUT;
}

pixout_cl DebugCMPS(v2fDebug IN)
{
	pixout_cl OUT;

	OUT.Color.xyz = texCUBE(DebugCM, IN.vIdxCoord).x;
	OUT.Color.w = 1.0f;

	return OUT;			
}

pixout_cl DebugSMPS(v2fDebug IN)
{
	pixout_cl OUT;

	OUT.Color.xyz = (1.0f - GetTexture2D(DebugSM, IN.vIdxCoord.xy).x);
	OUT.Color.w = 1.0f;

	return OUT;			
}

float4 DebugShadowCascadesVS(float4 inPosition : POSITION) : POSITION
{
	float4 vPos = inPosition;
	vPos.y = 1 - vPos.y;
	return float4(vPos.xy * 2 - 1, vPos.z, 1.0);
}

pixout_cl DebugShadowCascadesPS(float4 inPosition : SV_Position)
{
	pixout_cl OUT;
	OUT.Color.rgb = DebugCascadeColor.rgb;
	OUT.Color.w = 1.0f;

	return OUT;			
}

//////////////////////////////// technique ////////////////

technique DebugCubeMap
{
  pass p0
  {
    VertexShader = DebugCMVS();
    
    ZEnable = false;
    ZWriteEnable = false;
    CullMode = None;

    PixelShader = DebugCMPS();
  }
}

technique DebugShadowMap
{
  pass p0
  {
    VertexShader = DebugCMVS();
    
    ZEnable = false;
    ZWriteEnable = false;
    CullMode = None;

    PixelShader = DebugSMPS();
  }
}

technique DebugShadowCascades
{
	pass p0
	{
		VertexShader = DebugShadowCascadesVS();
		
		ZEnable = false;
		ZWriteEnable = false;
		
		PixelShader = DebugShadowCascadesPS();
	}
}

technique DeferredShadowPass
{
	//Stencil Pre-pass
  pass p0
  {
    VertexShader = FrustumClipVS() ShadowMaskGenVS;
    
    ZEnable = false;
    ZWriteEnable = false;
    CullMode = None;

    PixelShader = FrustumClipPS() ShadowMaskGenPS;
  }

	//Hi-stencil refresh pass
  pass p1
  {
    VertexShader = HiStencilRefreshVS() ShadowMaskGenVS;
    PixelShader = StencilCullPS() ShadowMaskGenPS;
    
    ZEnable = false;
    ZWriteEnable = false;
    CullMode = Back;
  }

	//Shadow pass
  pass p2
  {
    VertexShader = DeferredShadowVS() ShadowMaskGenVS;
    PixelShader = DeferredShadowPS() ShadowMaskGenPS;
    
    ZEnable = false;
    ZWriteEnable = false;
    CullMode = None;
  }
  
	//StencilCull pass for point light sources
  pass p3
  {
    VertexShader = StencilCullVS() ShadowMaskGenVS;
    
    ZEnable = false;
    ZWriteEnable = false;
    CullMode = Back;

    PixelShader = StencilCullPS() ShadowMaskGenPS;
  }

	//StencilCull pass for point light sources
  pass p4
  {
    VertexShader = FrustumVolumeVS() ShadowMaskGenVS;
    
    ZEnable = false;
    ZWriteEnable = false;
    CullMode = Back;

    PixelShader = StencilCullPS() ShadowMaskGenPS;
  }

	//Stencil Pre-pass
  pass p5
  {
    VertexShader = FrustumClipVolumeVS() ShadowMaskGenVS;
    
    ZEnable = false;
    ZWriteEnable = false;
    CullMode = None;

    PixelShader = FrustumClipVolumePS() ShadowMaskGenPS;
  }

	//Clouds shadows
	pass p6
	{

		VertexShader = DeferredShadowVS() ShadowMaskGenVS;
		PixelShader = CloudsShadowPS() ShadowMaskGenPS;
		ZEnable = false;
		ZWriteEnable = false;
		CullMode = None;
	}

  pass p7
  {
    VertexShader = FrustumClipVolumeVS() ShadowMaskGenVS;
    
    ZEnable = false;
    ZWriteEnable = false;
    CullMode = None;

    PixelShader = DeferredShadowPS() ShadowMaskGenPS;
  }

}

technique DeferredSimpleQuad
{
	//Stencil Pre-pass
  pass p0
  {
    VertexShader = SimpleQuadVS() ShadowMaskGenVS;
    
    ZEnable = false;
    ZWriteEnable = false;
    CullMode = None;

    PixelShader = StencilCullPS() ShadowMaskGenPS;
  }
}

technique DeferredSimpleQuad01
{
	//Stencil Pre-pass
  pass p0
  {
    VertexShader = SimpleQuadVS01() ShadowMaskGenVS;
    
    ZEnable = false;
    ZWriteEnable = false;
    CullMode = None;

    PixelShader = StencilCullPS() ShadowMaskGenPS;
  }
}

technique StencilVolume
{
  pass p0
  {
    VertexShader = StencilCullVS() ShadowMaskGenVS;
    
    ZEnable = false;
    ZWriteEnable = false;

    PixelShader = StencilCullPS() ShadowMaskGenPS;
  }
}

technique ResolveDepthTarget
{
	//Stencil Pre-pass
  pass p0
  {
    VertexShader = TexturedQuadVS();
    
    ZEnable = false;
    ZWriteEnable = false;
    CullMode = None;

    PixelShader = CopyDepthTarget();
  }
}

technique ReprojectShadowMap
{
  pass p0
  {
    VertexShader = BaseVS();
    
    ZEnable = false;
    ZWriteEnable = false;
    CullMode = None;

    PixelShader = ReprojectShadowMap();
  }
}
